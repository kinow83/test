echo 1 > /proc/sys/net/ipv4/tcp_syn_retries 



[root@fc ~]# tcpdump -i ens37 -nn port 80 and host 192.168.0.6
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on ens37, link-type EN10MB (Ethernet), capture size 262144 bytes
00:56:37.550832 IP 192.168.0.7.60346 > 192.168.0.6.80: Flags [S], seq 2361138519, win 29200, options [mss 1460,sackOK,TS val 2447278618 ecr 0,nop,wscale 7], length 0
00:56:38.580247 IP 192.168.0.7.60346 > 192.168.0.6.80: Flags [S], seq 2361138519, win 29200, options [mss 1460,sackOK,TS val 2447279647 ecr 0,nop,wscale 7], length 0

[root@fc ~]# time telnet 192.168.0.6 80
Trying 192.168.0.6...
telnet: connect to address 192.168.0.6: Connection timed out

real	0m3.084s
user	0m0.001s
sys	0m0.006s


==================================
setsockopt(sock, IPPROTO_TCP, TCP_SYNCNT, &tcp_syn_retries, slen);
==================================
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>


#include <netinet/tcp.h>


int main() {
        const char* server_name = "192.168.0.6";
        const int server_port = 80;

        struct sockaddr_in server_address;
        memset(&server_address, 0, sizeof(server_address));
        server_address.sin_family = AF_INET;

        // creates binary representation of server name
        // and stores it as sin_addr
        // http://beej.us/guide/bgnet/output/html/multipage/inet_ntopman.html
        inet_pton(AF_INET, server_name, &server_address.sin_addr);

        // htons: port in network order format
        server_address.sin_port = htons(server_port);

        // open a stream socket
        int sock;
        if ((sock = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
                printf("could not create socket\n");
                return 1;
        }


        int tcp_syn_retries = 1;    // 0 will failed, restricted by kernel
        socklen_t slen = sizeof(tcp_syn_retries);
        int ret = setsockopt(sock, IPPROTO_TCP, TCP_SYNCNT, &tcp_syn_retries, slen);
        if (-1 == ret)
        {
                perror("setsockopt");
                return 1;
        }

        // TCP is connection oriented, a reliable connection
        // **must** be established before any data is exchanged
        if (connect(sock, (struct sockaddr*)&server_address,
                    sizeof(server_address)) < 0) {
                printf("could not connect to server\n");
                return 1;
        }

        // send

        // data that will be sent to the server
        const char* data_to_send = "Gangadhar Hi Shaktimaan hai";
        send(sock, data_to_send, strlen(data_to_send), 0);

        // receive

        int n = 0;
        int len = 0, maxlen = 100;
        char buffer[maxlen];
        char* pbuffer = buffer;

        // will remain open until the server terminates the connection
        while ((n = recv(sock, pbuffer, maxlen, 0)) > 0) {
                pbuffer += n;
                maxlen -= n;
                len += n;

                buffer[len] = '\0';
                printf("received: '%s'\n", buffer);
        }

        // close the socket
        close(sock);
        return 0;
}






