#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>

const char *terminate = "close";
size_t      terminatelen = 5;
char server[32];
int N, C;
#define SERVER_PORT 10008
const char *DATA = 


void echo(const char *data, size_t datalen)
{
	int sockfd;
	struct sockaddr_in serv_addr;
	int n;
	char buff[1500];

	if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("Failed creating socket\n");
	}

	bzero((char *) &serv_addr, sizeof (serv_addr));

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = inet_addr(server);
	serv_addr.sin_port = htons(SERVER_PORT);

	while (1) {
		if (connect(sockfd, (struct sockaddr *) &serv_addr, sizeof (serv_addr)) < 0) {
//			printf("Failed to connect to server\n");
//			return;
			usleep(10);
		} else {
			break;
		}
	}

	n = send(sockfd, data, datalen, 0);
	if (n <= 0) {
		perror("send");
		close(sockfd);
		return;
	}

	n = recv(sockfd, buff, 1500, 0);
	if (n <= 0) {
		perror("recv");
	}
	close(sockfd);

	return;
}

void* handler(void *arg)
{
	size_t datalen = strlen(DATA);
	int i;
	for (i=0; i<C; i++) {
		echo(DATA, datalen);
	}
	return NULL;
}

int main(int argc, char **argv) 
{
	strcpy(server, argv[1]);
	N = atoi(argv[2]);
	C = atoi(argv[3]);
	int i;
	pthread_t tid[N];


	for (i=0; i<N; i++) {
		pthread_create(&tid[i], NULL, handler, NULL);
	}

	for (i=0; i<N; i++) {
		pthread_join(tid[i], NULL);
	}
	echo(terminate, terminatelen);
	return 0;
}
